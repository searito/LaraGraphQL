#import user.graphql
#import account.graphql
#import transaction.graphql
#import category.graphql
"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

type Query {
    me: User! @auth
    accounts: [Account!] @paginate(scopes: ["byLoggedInUser"]) @guard(with: ["api"])
    account(id: ID! @eq): Account! @find @can(ability: "view", find: "id") @guard(with: ["api"])
    transactions(where: _@whereConditions(columns: [
        "account_id", "type", "category_id", "created_at"
    ])): [Transaction!]
        @paginate(scopes: ["byLoggedInUser"])
        @guard(with: ["api"])
    transaction(id: ID! @eq): Transaction! @find @can(ability: "view", find: "id") @guard(with: ["api"])
    categories: [Category!] @paginate(scopes: ["byLoggedInUser"]) @guard(with: ["api"])
    category(id: ID! @eq): Category! @find @can(ability: "view", find: "id") @guard(with: ["api"])
}

type Mutation {
    createAccount(input: CreateAccountInput! @spread): Account
        @create
        @inject(context: "user.id", name: "user_id")
        @guard(with: ["api"])

    updateAccount(id: ID!, input: UpdateAccountInput! @spread): Account
        @update
        @can(ability: "update", find: "id")
        @guard(with: ["api"])

    createTransaction(input: CreateTransactionInput! @spread): Transaction!
        @create
        @guard(with: ["api"])

    updateTransaction(id: ID!, input: UpdateTransactionInput @spread): Transaction
        @update
        @can(ability: "update", find: "id")
        @guard(with: ["api"])

    deleteTransaction(id: ID!): Transaction!
        @delete
        @can(ability: "delete", find: "id")
        @guard(with: ["api"])

    createCategory(input: CreateCategoryInput! @spread): Category!
        @create
        @inject(context: "user.id", name: "user_id")
        @guard(with: ["api"])

    updateCategory(id: ID!, input: UpdateCategoryInput! @spread): Category
        @update
        @can(ability: "update", find: "id")
        @guard(with: ["api"])

    deleteCategory(id: ID!): Category!
        @delete
        @can(ability: "delete", find: "id")
        @guard(with: ["api"])
}
